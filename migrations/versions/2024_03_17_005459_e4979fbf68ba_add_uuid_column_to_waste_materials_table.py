"""Add UUID column to waste materials table

Revision ID: e4979fbf68ba
Revises: 002def742a3c
Create Date: 2024-03-17 00:54:59.096496

"""

from typing import Sequence, Union

import sqlalchemy as sa
import sqlmodel
from alembic import op
from sqlalchemy.sql import text

from core.utils.custom_utils import CustomUtils

# revision identifiers, used by Alembic.
revision: str = "e4979fbf68ba"
down_revision: Union[str, None] = "002def742a3c"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # Create uuid column by temporarily setting it as nullable
    op.add_column(
        "waste_materials",
        sa.Column("uuid", sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    )

    # Set UUID values for existing rows
    conn = op.get_bind()
    result = conn.execute(text("SELECT id FROM waste_materials"))

    for row in result:
        conn.execute(
            text("UPDATE waste_materials SET uuid = :uuid WHERE id = :id"),
            {"uuid": CustomUtils.generate_uuid("wm_"), "id": row.id},
        )

    # Set uuid column as not nullable
    op.alter_column("waste_materials", "uuid", nullable=False)

    # Add unique constraint
    op.create_unique_constraint(None, "waste_materials", ["uuid"])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, "waste_materials", type_="unique")
    op.drop_column("waste_materials", "uuid")
    # ### end Alembic commands ###
